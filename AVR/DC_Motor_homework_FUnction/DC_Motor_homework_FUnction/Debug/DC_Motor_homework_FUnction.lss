
DC_Motor_homework_FUnction.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ce  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b2  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <CW>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void CW() {
	PORTB|= (1 << PORTB5);
  80:	85 b1       	in	r24, 0x05	; 5
  82:	80 62       	ori	r24, 0x20	; 32
  84:	85 b9       	out	0x05, r24	; 5
	PORTB&= ~(1 << PORTB4);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8f 7e       	andi	r24, 0xEF	; 239
  8a:	85 b9       	out	0x05, r24	; 5
  8c:	08 95       	ret

0000008e <STOP>:
}
void STOP() {
	PORTB &= ~(1 << PORTB5);
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	8f 7d       	andi	r24, 0xDF	; 223
  92:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB4);
  94:	85 b1       	in	r24, 0x05	; 5
  96:	8f 7e       	andi	r24, 0xEF	; 239
  98:	85 b9       	out	0x05, r24	; 5
  9a:	08 95       	ret

0000009c <ACW>:
}
void ACW( ) {
	PORTB |= (1 << PORTB4);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB5);
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
	
	 DDRB |= (1 << DDB5);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	84 b9       	out	0x04, r24	; 4
	 DDRB |= (1 << DDB4); 
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	84 b9       	out	0x04, r24	; 4


    /* Replace with your application code */
    while (1) 
    {
		CW();           // Clockwise
  b6:	0e 94 40 00 	call	0x80	; 0x80 <CW>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x16>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x20>
  ca:	00 00       	nop
		_delay_ms(1000);

		STOP();         // Stop
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <STOP>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 e2       	ldi	r24, 0x23	; 35
  d4:	94 ef       	ldi	r25, 0xF4	; 244
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x2c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x36>
  e0:	00 00       	nop
		_delay_ms(5000);

		ACW();          // Anti-clockwise
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <ACW>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x42>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x4c>
  f6:	00 00       	nop
  f8:	de cf       	rjmp	.-68     	; 0xb6 <main+0xc>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
