
MODULAR_TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000820  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fb  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pin_initialization>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>

void pin_initialization(void){
	 DDRD |= (1<<DDD0) | (1<<DDD1) | (1<<DDD2) | (1<<DDD3) | (1<<DDD4);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f 61       	ori	r24, 0x1F	; 31
  84:	8a b9       	out	0x0a, r24	; 10
  86:	08 95       	ret

00000088 <main>:
#include "gpio.h"


int main(void)
{
	pin_initialization();
  88:	0e 94 40 00 	call	0x80	; 0x80 <pin_initialization>
	timer_init();
  8c:	0e 94 6f 00 	call	0xde	; 0xde <timer_init>
    /* Replace with your application code */
    while (1) 
    {
		PORTD |= (1 << PORTD0);  // LED0 ON
  90:	8b b1       	in	r24, 0x0b	; 11
  92:	81 60       	ori	r24, 0x01	; 1
  94:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD1);  // LED1 ON
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2);  // LED2 ON
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD3);  // LED3 ON
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD4);  // LED4 ON
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	8b b9       	out	0x0b, r24	; 11
		kichu(2000);              // 2-second delay
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	0e 94 7f 00 	call	0xfe	; 0xfe <kichu>

		PORTD &= ~(1 << PORTD0);  // LED0 OFF
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD1);  // LED1 OFF
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD2);  // LED2 OFF
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD3);  // LED3 OFF
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD4);  // LED4 OFF
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	8b b9       	out	0x0b, r24	; 11
		kichu(2000);               // 2-second delay
  d4:	80 ed       	ldi	r24, 0xD0	; 208
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	0e 94 7f 00 	call	0xfe	; 0xfe <kichu>
  dc:	d9 cf       	rjmp	.-78     	; 0x90 <main+0x8>

000000de <timer_init>:
#include <util/delay.h>
#include <stdint.h>


void timer_init(void){
	TCCR0A|=(1<<WGM01) ;//CTC MODE SET
  de:	84 b5       	in	r24, 0x24	; 36
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
	OCR0A=249;
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	87 bd       	out	0x27, r24	; 39
	TCNT0=0;
  e8:	16 bc       	out	0x26, r1	; 38
	TCCR0B|=(1<<CS00); // SET 64
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	85 bd       	out	0x25, r24	; 37
	TCCR0B|=(1<<CS01);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 bd       	out	0x25, r24	; 37
	TIFR0|=(1<<OCF0A); //  FLAG SET TO ZERO
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	08 95       	ret

000000fe <kichu>:
	
	
}
void kichu(uint16_t ms){
	while (ms--) {
  fe:	06 c0       	rjmp	.+12     	; 0x10c <kichu+0xe>
		while (!(TIFR0 & (1 << OCF0A))) {
 100:	a9 9b       	sbis	0x15, 1	; 21
 102:	fe cf       	rjmp	.-4      	; 0x100 <kichu+0x2>
			// wait for compare match
		}
		TIFR0 |= (1 << OCF0A); // clear flag
 104:	85 b3       	in	r24, 0x15	; 21
 106:	82 60       	ori	r24, 0x02	; 2
 108:	85 bb       	out	0x15, r24	; 21
	TIFR0|=(1<<OCF0A); //  FLAG SET TO ZERO
	
	
}
void kichu(uint16_t ms){
	while (ms--) {
 10a:	c9 01       	movw	r24, r18
 10c:	9c 01       	movw	r18, r24
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	89 2b       	or	r24, r25
 114:	a9 f7       	brne	.-22     	; 0x100 <kichu+0x2>
		while (!(TIFR0 & (1 << OCF0A))) {
			// wait for compare match
		}
		TIFR0 |= (1 << OCF0A); // clear flag
	}
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
