
hw_ctc_timerdelay5s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_5s>:
#define F_CPU 16000000UL
#include <avr/io.h>

void delay_5s(void)
{
	for (int i = 0; i < 6250; i++)   // 5sec second
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	07 c0       	rjmp	.+14     	; 0x94 <delay_5s+0x14>
	{
		while (!(TIFR0 & (1 << OCF0A)));  // Wait until compare match
  86:	a9 9b       	sbis	0x15, 1	; 21
  88:	fe cf       	rjmp	.-4      	; 0x86 <delay_5s+0x6>
		TIFR0 |= (1 << OCF0A);            // Clear flag
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	85 bb       	out	0x15, r24	; 21
#define F_CPU 16000000UL
#include <avr/io.h>

void delay_5s(void)
{
	for (int i = 0; i < 6250; i++)   // 5sec second
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
  94:	2a 36       	cpi	r18, 0x6A	; 106
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	38 07       	cpc	r19, r24
  9a:	ac f3       	brlt	.-22     	; 0x86 <delay_5s+0x6>
	{
		while (!(TIFR0 & (1 << OCF0A)));  // Wait until compare match
		TIFR0 |= (1 << OCF0A);            // Clear flag
	}
}
  9c:	08 95       	ret

0000009e <main>:

int main(void)
{
	DDRB |= (1 << DDB5);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB4);                 // Set PB5 as output
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	84 b9       	out	0x04, r24	; 4

	TCCR0A |= (1 << WGM01);              // CTC mode
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	84 bd       	out	0x24, r24	; 36
	OCR0A = 200;                         // Compare value
  b0:	88 ec       	ldi	r24, 0xC8	; 200
  b2:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;
  b4:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS00) | (1 << CS01); // Prescaler = 64
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	85 bd       	out	0x25, r24	; 37

	TIFR0 |= (1 << OCF0A);               // Clear flag before loop
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	85 bb       	out	0x15, r24	; 21

	while (1)
	{
		PORTB |= (1 << PORTB5);          // LED ON
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
		delay_5s();
  c8:	0e 94 40 00 	call	0x80	; 0x80 <delay_5s>
		PORTB &= ~(1 << PORTB5);         // LED OFF
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	85 b9       	out	0x05, r24	; 5
		delay_5s();
  d2:	0e 94 40 00 	call	0x80	; 0x80 <delay_5s>
		PORTB |= (1 << PORTB4);          // LED ON
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	85 b9       	out	0x05, r24	; 5
		delay_5s();
  dc:	0e 94 40 00 	call	0x80	; 0x80 <delay_5s>
		PORTB &= ~(1 << PORTB4);         // LED OFF
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	85 b9       	out	0x05, r24	; 5
		delay_5s();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <delay_5s>
  ea:	eb cf       	rjmp	.-42     	; 0xc2 <main+0x24>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
