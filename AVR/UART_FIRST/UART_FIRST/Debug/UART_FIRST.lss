
UART_FIRST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f9  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e3  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8e:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_char_transmit>:
#define UBRR_VALUE ((F_CPU / (16UL * BAUD)) - 1)  // UBRR = 103


 void uart_char_transmit(char data) {
	 // Wait until transmit buffer is empty (UDRE0 = 1)
	 while (!(UCSR0A & (1 << UDRE0)));
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <uart_char_transmit>

	 // Load data into transmit buffer
	 UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <uart_String_transmit>:
 }

void uart_String_transmit(const char* str) {
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	ec 01       	movw	r28, r24
	while (*str) {
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <uart_String_transmit+0xe>
		uart_char_transmit(*str);  // Send each character
  ac:	0e 94 4b 00 	call	0x96	; 0x96 <uart_char_transmit>
		str++;                     // Move to next character
  b0:	21 96       	adiw	r28, 0x01	; 1
	 // Load data into transmit buffer
	 UDR0 = data;
 }

void uart_String_transmit(const char* str) {
	while (*str) {
  b2:	88 81       	ld	r24, Y
  b4:	81 11       	cpse	r24, r1
  b6:	fa cf       	rjmp	.-12     	; 0xac <uart_String_transmit+0x8>
		uart_char_transmit(*str);  // Send each character
		str++;                     // Move to next character
	}
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	UBRR0H = (UBRR_VALUE>>8); //right shift to make this 
  be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L =UBRR_VALUE;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
     // Enable transmitter
     UCSR0B = (1 << TXEN0);
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	  // Set frame format: 8 data bits, 1 stop bit, no parity
	  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Bits 1 and 0 of UCSR0C
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	
    /* Replace with your application code */
    while (1) 
    {
		uart_String_transmit("helo world nivya");
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_String_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x24>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2e>
  ec:	00 00       	nop
		  // pasing string 
		  _delay_ms(1000)  ;
		  uart_char_transmit('\n');  
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 4b 00 	call	0x96	; 0x96 <uart_char_transmit>
		uart_char_transmit('D');  // passing character
  f4:	84 e4       	ldi	r24, 0x44	; 68
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <uart_char_transmit>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	83 ed       	ldi	r24, 0xD3	; 211
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x42>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x4c>
 10a:	00 00       	nop
	
		_delay_ms(1000)  ;// one second wait
		 uart_char_transmit('\n'); 
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <uart_char_transmit>
 112:	e0 cf       	rjmp	.-64     	; 0xd4 <main+0x16>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
