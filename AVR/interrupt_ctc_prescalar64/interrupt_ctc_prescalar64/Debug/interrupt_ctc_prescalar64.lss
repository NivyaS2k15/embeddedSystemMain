
interrupt_ctc_prescalar64.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b4  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000227  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#include <avr/interrupt.h> //interrupt header 
  #include <stdint.h>
  
volatile  uint16_t count =0; 
  // interrupt service routine
  ISR(TIMER0_COMPA_vect){       //TIMER_OVF_vect = this is interrupt vector table for  "address for the timer overflow  interrupt 
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	  
	  if (count>=1245)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  a8:	8d 3d       	cpi	r24, 0xDD	; 221
  aa:	94 40       	sbci	r25, 0x04	; 4
  ac:	40 f0       	brcs	.+16     	; 0xbe <__vector_14+0x2e>
	  {
		  PORTB ^=(1<<PORTB5);
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	89 27       	eor	r24, r25
  b4:	85 b9       	out	0x05, r24	; 5
		  count=0;
  b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	  }
	  count++;
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:

int main(void)
{
	DDRB |=(1<<DDB5); //set output pord5
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	84 b9       	out	0x04, r24	; 4
	//TCNT0=0;  becoz polling is not done here
	TCCR0A |=(1<<WGM01);  // ctc mode
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	84 bd       	out	0x24, r24	; 36
	OCR0A = 200; 
  ec:	88 ec       	ldi	r24, 0xC8	; 200
  ee:	87 bd       	out	0x27, r24	; 39
	TCCR0B |=(1<<CS00);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=(1<<CS01);  // 64 prescalar 
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 bd       	out	0x25, r24	; 37
	
	
	

    TIMSK0 |= (1 << OCIE0A);  // ctc mode /ENABLING TIMER OVERFLOW INTERRUPT
  fc:	ee e6       	ldi	r30, 0x6E	; 110
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
	sei(); // globally interrupt enable
 106:	78 94       	sei
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x28>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
